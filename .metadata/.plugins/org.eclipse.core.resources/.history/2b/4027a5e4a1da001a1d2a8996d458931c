package com.bolsadeideas.springboot.clientes.app.controllers;



import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.validation.Valid;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bolsadeideas.springboot.clientes.app.models.Cliente;
import com.bolsadeideas.springboot.clientes.app.models.service.IServiceCliente;
import com.bolsadeideas.springboot.clientes.app.util.navigate.Paginador;

@Controller
@SessionAttributes(value = "cliente")
public class ClienteController {
	
	@Autowired
	IServiceCliente serviceClienteDao;
	
	
	@RequestMapping(value = "ver/{id}")
	public String ver(@PathVariable() Long id, Model modelo, RedirectAttributes flash) {
		
		Cliente cliente = serviceClienteDao.findOne(id);
		
		if(cliente == null) {
			flash.addFlashAttribute("error", "El Id no esta registrado en la BBDD");
			return "redirect:/listar";
		}
		
		modelo.addAttribute("cliente", cliente);
		modelo.addAttribute("titulo", "Detalle cliente: "+cliente.getNombre());
		modelo.addAttribute("imgfoot", "/images/spring.png");
		
		return "ver";
	}
	
	@RequestMapping(value = "/listar",method = RequestMethod.GET)
	public String listado(@RequestParam(name = "page",defaultValue = "0")  int page, Model modelo) {
		
		Pageable pageRequest = PageRequest.of(page, 4);
		
		Page<Cliente> clientes = serviceClienteDao.faindAllPage(pageRequest);
		
		Paginador<Cliente> pageCliente = new Paginador<>("/listar", clientes);
		
		modelo.addAttribute("titulo", "Listado de clientes");
		modelo.addAttribute("clientes", clientes);
		modelo.addAttribute("page", pageCliente);
		return "listar";
	}
	
	@RequestMapping(value = "/form")
	public String crear(Model modelo) {
		
		Cliente cliente = new Cliente();
		modelo.addAttribute("titulo", "Almacenar Cliente");
		modelo.addAttribute("cliente", cliente);
		return "form";
	}
	
	
	@RequestMapping(value = "/form", method = RequestMethod.POST)
	public String guardar(@Valid Cliente cliente, BindingResult result, Model modelo,@RequestParam("file") MultipartFile foto, SessionStatus status,RedirectAttributes flash) {
		
		String mensage = cliente.getId() != null ? "Cliente Editado" : "Cliente Guardado";
		if(result.hasErrors()) {
			modelo.addAttribute("titulo", "Almacenar Cliente");
			
			return "form";
		}
		
		if(!foto.isEmpty()) {
			
			try {
				
				byte[] fotoBytes = foto.getBytes();
				Path rutaCompleta = Paths.get("C:/temp/uploads" , foto.getOriginalFilename());
				Files.write(rutaCompleta, fotoBytes);
				flash.addFlashAttribute("info", "Imagen cargada");
				cliente.setFoto(foto.getOriginalFilename());
				System.out.println(foto.getOriginalFilename());
			} catch (IOException e) {
			
				e.printStackTrace();
			}
			
		}
		
		serviceClienteDao.save(cliente);
		flash.addFlashAttribute("success", mensage);
		status.setComplete();
		return "redirect:/listar";
	}
	
	
	@RequestMapping(value = "/form/{id}")
	public String editar(@PathVariable Long id, Model modelo, RedirectAttributes flash) {
		
		Cliente cliente = null;
		if(id > 0) {
			cliente = serviceClienteDao.findOne(id);
			
			if(cliente == null){
				flash.addFlashAttribute("danger", "El Cliente no existe");
				
				return "redirect:/listar";
			}
			
		}else {
			flash.addFlashAttribute("danger", "El Cliente no existe");
			return "redirect:/listar";
		}
		
		modelo.addAttribute("titulo", "Editar Cliente");
		modelo.addAttribute("cliente", cliente);
		modelo.addAttribute("imgfoot", "/images/spring.png");
		return "form";
	}
	
	@RequestMapping(value = "/eliminar/{id}")
	public String delete(@PathVariable Long id, Model modelo, RedirectAttributes flash) {
		
		Cliente cliente = serviceClienteDao.findOne(id);
		
		if(cliente == null) {
			flash.addFlashAttribute("danger", "El Id no existe");
			
			return "redirect:/listar";
		}
		
		flash.addFlashAttribute("success", "Cliente Eliminado");
		serviceClienteDao.delete(id);
		
		
		return "redirect:/listar";
	}

}
